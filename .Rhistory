select(-countRbyRegion)%>%
filter(label==2,rankRRegion==1)
user.retain.test<-unique(temp$user_id)
length(user.retain.test)
user_list.test<-user.retain.train %in% user.retain.test
user_list.test<-user.retain.train[user.retain.train %in% user.retain.test]
length(user.retain.train)
length(user_list.test)
rm(user.retain.test,user.retain.train)
rm(temp)
View(date.list)
View(UR.RbyDate.2)
rm(date.list,temp.timeline,UR.RbyDate.2,UR.RegionByDate.2)
rm(weekday,dist.temp,flag,i,path,timeDate.list)
rm(f_plotTSbyU)
gc(reset=T)
View(UR.summary.weekday)
rm(UR.summary.weekday)
train.2.filter<-filter(train.2.filter,label==2)
test.2.filter<-filter(test.2.filter,user_id%in%user_list.test)
rating.DF.train<-select(train.2.filter,user_id,business_id,stars)
View(rating.DF.train)
rating.DF.test<-select(test.2.filter,user_id,business_id,stars)
evaluate<-evaluationScheme(rating.DF.train)
rating.DF.train<-ungroup(rating.DF.train)
evaluate<-evaluationScheme(rating.DF.train)
rating.RM.train<-as(rating.DF.train,"realRatingMatrix")
Rating.R1M<-as(rating.DF.train, "realRatingMatrix")
rating.RM.train<-as(rating.DF.train, "realRatingMatrix")
rating.RM.train<-as(as.data.frame(rating.DF.train),
"realRatingMatrix")
evaluate<-evaluationScheme(rating.RM.train)
evaluate<-evaluationScheme(rating.RM.train,train=0.8,given=3,goodRating=3)
evaluate<-evaluationScheme(rating.RM.train,train=0.8,given=-1,goodRating=3)
evaluate[[1]]
rm(evaluate)
recommenderRegistry
recommenderRegistry$get_entry_names()
length(unique(train.2.filter))
length(unique(train.2.filter$business_id))
View(B.Basic)
sum(B.Basic$label==2)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weithgs=c(.1,.1,.5,.3)
)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
#  Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
#  Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
#  Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.5,.5)
#  weithgs=c(.1,.1,.5,.3)
)
dims(rating.RM.train)
dim(rating.RM.train)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
#  Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.5,.5)
#  weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
#  Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.5,.5)
#  weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
#  Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
#  Recommender(rating.RM.train,method="SVD"),
Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.1,.1,.8)
#  weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
save.image("E:/8sem/thesis/src/0410recommender.RData")
shiny::runApp('RRAPP1')
runApp('E:/git/GeeRS/RRAPP1')
runApp('E:/git/GeeRS/RRAPP1')
load("E:/8sem/thesis/src/0411 recommender.RData")
library(data.table)
library(dplyr)
library(ggplot2)
library(leaflet)
library(recommenderlab)
recModel<-HybridRecommender(
Recommender(rating.RM.train,method="RANDOM"),
Recommender(rating.RM.train,method="POPULAR"),
Recommender(rating.RM.train,method="IBCF"),
#  Recommender(rating.RM.train,method="ALS"),
#  Recommender(rating.RM.train,method="RERECOMMEND"),
Recommender(rating.RM.train,method="SVD"),
#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.1,.1,.4,.4)
#  weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
load("E:/8sem/thesis/src/0411 recommender.RData")
View(Region.Info)
Region.Info$area
Region.Info$countRbyLabel
Region.Info$countRbyLabel/Region.Info$area
load("E:/8sem/thesis/src/0416 我觉得这次测试集训练集划分完美啦.RData")
library(devtools)
install.packages("rJava")
install.packages("ffbase")
install_github("Myrrix-R-interface", "jwijffels", subdir="/Myrrixjars/pkg")
install_github("Myrrix-R-interface", "jwijffels", subdir="/Myrrix/pkg")
shiny::runApp('RRAPP1')
################################################
f.get.flavor<-function(usr_id,Kstar=.5){
usr.temp<-filter(UR.Flavor.test,user_id==usr_id)%>%
select(-user_id,-business_id)
usr.temp$categories<-gsub("'","",usr.temp$categories)
len<-dim(usr.temp)[1]
index=1
usr.flavor<-data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
)
for(index in 2:len){
usr.flavor<-rbind(usr.flavor,
data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
))
}
usr.flavor<-filter(usr.flavor,!grepl("Restaurants",flavor))
usr.flavor$diff<-as.numeric(max(usr.flavor$date)-usr.flavor$date)
usr.flavor$dateStar<-Kstar*(1/log(usr.flavor$diff+2.33))*exp(usr.flavor$stars)
result.flavor<-select(usr.flavor,flavor,dateStar)%>%
group_by(flavor)%>%
summarise(score=sum(dateStar))
# 数据标准化
result.flavor$score<-scale1(result.flavor$score,center=T,scale=T)
result.flavor$flavor<-as.character(result.flavor$flavor)
return(as.data.frame(result.flavor))
}
scale1<- function (x, center = TRUE, scale = TRUE)
{
x <- as.matrix(x)
nc <- ncol(x)
if (is.logical(center)) {
if (center) {
center <- colMeans(x, na.rm = TRUE)
x <- sweep(x, 2L, center, check.margin = FALSE)
}
}
else if (is.numeric(center) && (length(center) == nc))
x <- sweep(x, 2L, center, check.margin = FALSE)
else stop("length of 'center' must equal the number of columns of 'x'")
if (is.logical(scale)) {
if (scale) {
f <- function(v) {
v <- v[!is.na(v)]
sqrt(sum(v^2)/max(1, length(v) - 1L))
}
scale <- apply(x, 2L, f)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
}
}
else if (is.numeric(scale) && length(scale) == nc)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
else stop("length of 'scale' must equal the number of columns of 'x'")
#if (is.numeric(center))
#    attr(x, "scaled:center") <- center
#if (is.numeric(scale))
#    attr(x, "scaled:scale") <- scale
x
}
engine.random<-function(x,y,Radius=0.01,TopN=10,Flavour=NULL){
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
if(!is.null(Flavour)){
flavor.list<-vector()
for(flavor.ith in 1:length(Flavour$flavor)){
flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
}
B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
shiny::runApp('RRAPP1')
f.get.flavor<-function(usr_id,Kstar=.5){
usr.temp<-filter(UR.Flavor.test,user_id==usr_id)%>%
select(-user_id,-business_id)
usr.temp$categories<-gsub("'","",usr.temp$categories)
len<-dim(usr.temp)[1]
index=1
usr.flavor<-data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
)
for(index in 2:len){
usr.flavor<-rbind(usr.flavor,
data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
))
}
usr.flavor<-filter(usr.flavor,!grepl("Restaurants",flavor))
usr.flavor$diff<-as.numeric(max(usr.flavor$date)-usr.flavor$date)
usr.flavor$dateStar<-Kstar*(1/log(usr.flavor$diff+2.33))*exp(usr.flavor$stars)
result.flavor<-select(usr.flavor,flavor,dateStar)%>%
group_by(flavor)%>%
summarise(score=sum(dateStar))
# 数据标准化
result.flavor$score<-scale1(result.flavor$score,center=T,scale=T)
result.flavor$flavor<-as.character(result.flavor$flavor)
return(as.data.frame(result.flavor))
}
scale1<- function (x, center = TRUE, scale = TRUE)
{
x <- as.matrix(x)
nc <- ncol(x)
if (is.logical(center)) {
if (center) {
center <- colMeans(x, na.rm = TRUE)
x <- sweep(x, 2L, center, check.margin = FALSE)
}
}
else if (is.numeric(center) && (length(center) == nc))
x <- sweep(x, 2L, center, check.margin = FALSE)
else stop("length of 'center' must equal the number of columns of 'x'")
if (is.logical(scale)) {
if (scale) {
f <- function(v) {
v <- v[!is.na(v)]
sqrt(sum(v^2)/max(1, length(v) - 1L))
}
scale <- apply(x, 2L, f)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
}
}
else if (is.numeric(scale) && length(scale) == nc)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
else stop("length of 'scale' must equal the number of columns of 'x'")
#if (is.numeric(center))
#    attr(x, "scaled:center") <- center
#if (is.numeric(scale))
#    attr(x, "scaled:scale") <- scale
x
}
engine.random<-function(x,y,Radius=0.01,TopN=10,Flavour=NULL){
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
if(!is.null(Flavour)){
flavor.list<-vector()
for(flavor.ith in 1:length(Flavour$flavor)){
flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
}
B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
library(dplyr)
library(data.table)
library(igraph)
library(data.table)
library(dplyr)
library(ggplot2)
library(extrafont)
path="E:/git/plot-SLAMORB/"
path.data="orangepi_data_20170412"
path.data<-paste("src/",path.data,sep="")
setwd(path)
loadfonts(device="win")
setwd(path.data)
file.list<-list.files()
file.list
record.index<-c(10,11,7,8,9)
setwd(path)
setwd(path)
setwd(path.data)
file.list<-list.files()
file.list
pose.record<-list()
pose.record<-list()
time.record<-list()
for(record.ith in 1:5){
# pose.record
pose.record[[record.ith]]<-as.data.frame(fread(file.list[record.ith],header=F))
names(pose.record[[record.ith]])<-c("x","y","z")
temp<-t(as.data.frame(strsplit(pose.record[[record.ith]]$x,":")))
pose.record[[record.ith]]$x<-as.numeric(temp[,2])
pose.record[[record.ith]]$frame.number<-as.numeric(temp[,1])+1
# time.record
time.record[[record.ith]]<-as.data.frame(fread(file.list[record.ith+5],header=F))
names(time.record[[record.ith]])<-c("frame.number","time")
time.record[[record.ith]]$frame.number<-1:length(time.record[[record.ith]]$frame.number)
}
result.pose<-"pose4-22"
result.time<-"time4-22"
Outputname.pose="Trajectory"
Outputname.time="Computational time of each dataset"
file.index.pose=c(1,2)
file.index.time=c(1)
plot.width=8
plot.height=5
size.title=20
size.labs=17  #坐标轴标题
size.axis=12  #坐标轴刻度
pose.title=Outputname.pose
pose.xlab="x(m)"
pose.ylab="y(m)"
time.title=Outputname.time
time.xlab="Frame Number"
time.ylab="Computational Time"
size.border=3
size.line.pose=2
size.marker.pose=4
size.line.time=1
size.marker.time=2
source('script/plot_trajectory.R', encoding = 'UTF-8')
setwd(path)
source('script/plot_trajectory.R', encoding = 'UTF-8')
fonts()
g.pose.together
source('script/plot_time.R', encoding = 'UTF-8')
getwd()
source('script/plot_trajectory.R', encoding = 'UTF-8')
setwd(path);source('script/plot_trajectory.R', encoding = 'UTF-8')
g.pose.together
setwd(path);source('script/plot_time.R', encoding = 'UTF-8')
g.time
loadfonts(device="win")
windowsFonts()
setwd(path)
setwd("result")
if(!dir.exists(result.pose)){
dir.create(result.pose)
}
setwd(result.pose)
pose.temp=rbind(pose.record[[1]],pose.record[[2]])
len<-dim(pose.temp)[1]
g.pose.together<-ggplot(data=pose.temp,aes(x,y))+
geom_path(size=size.line.pose,color="navy")+
geom_point(color="orange",shape=7,size=size.marker.pose)+
labs(title=pose.title,x=pose.xlab,y=pose.ylab)+
theme_light()+
scale_y_reverse()+
scale_x_reverse()+
theme(
#    legend.background = element_rect(size=0.5, linetype="solid", colour ="darkblue"),
#    legend.position="bottom",
text=element_text(family="Times New Roman"),
plot.title = element_text(size=size.title,hjust = 0.5),
axis.text.x = element_text(size = size.axis),
axis.text.y = element_text(size = size.axis),
axis.title.x = element_text(size = size.labs),
axis.title.y = element_text(size = size.labs),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(size=size.border)
)
ggsave(filename=paste(paste(Outputname.pose,10,11,Sys.Date(),sep="-"),".eps",sep=""),
g.pose.together,device="eps",
width = plot.width,height = plot.height,units = "in")
ggsave(filename=paste(paste(Outputname.pose,10,11,Sys.Date(),sep="-"),".png",sep=""),
g.pose.together,device="png",
width = plot.width,height = plot.height,units = "in")
windowsFonts(Times=windowsFont("TT Times New Roman"))
setwd(path);source('script/plot_trajectory.R', encoding = 'UTF-8')
g.pose.together
windowsFonts(Times=windowsFont("Times New Roman"))
warnings()
fonts()
